// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_NON_POOLED_URL") // uses connection pooling
  directUrl = env("DATABASE_POOLED_URL") // uses a direct connection
}

model Transaction {
  transaction_id  Int       @id @default(autoincrement())
  email           String    @db.VarChar(255)
  date_time       DateTime
  amount          Decimal   @db.Decimal(10, 2)
  transaction_type TransactionType
  description     String    @db.VarChar(255)
  category_id     Int
  balance         Decimal   @db.Decimal(10, 2)

  user            User      @relation(fields: [email], references: [email])
  category        Category  @relation(fields: [category_id], references: [category_id])
}

model OTP {
  email      String    @id @db.VarChar(255)
  otp        String    @db.VarChar(6)
  expires_at DateTime
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @db.VarChar(255)
  email       String    @unique @db.VarChar(255)
  password    String      @db.Text
  isVerified  Boolean   @default(false)
  age         Int
  gender      String    @db.VarChar(50)
  photoURL    String    @db.VarChar(999)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  transactions Transaction[]
  budgets      Budget[] // Relation to the Budget model
}

model Category {
  category_id   Int         @id @default(autoincrement())
  category_name String      @db.VarChar(100)

  transactions  Transaction[]
  budgets       Budget[]    // Relation to the Budget model
}


enum TransactionType {
  credit
  debit
}
model Budget {
  budget_id     Int       @id @default(autoincrement())
  email    String
  category_id   Int
  budget_amount Decimal   @db.Decimal(10, 2)
  amount_spent  Decimal   @default(0) @db.Decimal(10, 2)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  valid_until   DateTime  // The period until which the budget is valid
  emailSent50   Boolean   @default(false) // Indicates if email sent at 50% of budget
  emailSent100  Boolean   @default(false) // Indicates if email sent at 100% of budget

  user          User      @relation(fields: [email], references: [email])
  category      Category  @relation(fields: [category_id], references: [category_id])

  @@unique([email, category_id]) // Ensures a user can only set one budget per category
}




